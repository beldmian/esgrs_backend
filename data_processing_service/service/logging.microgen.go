// Code generated by microgen 1.0.4. DO NOT EDIT.

package service

import (
	"context"
	service "esgrs/data_processing_service"
	types "esgrs/pkg/types"
	log "github.com/go-kit/kit/log"
	"time"
)

// LoggingMiddleware writes params, results and working time of method call to provided logger after its execution.
func LoggingMiddleware(logger log.Logger) Middleware {
	return func(next service.DataProcessingService) service.DataProcessingService {
		return &loggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMiddleware struct {
	logger log.Logger
	next   service.DataProcessingService
}

func (M loggingMiddleware) GetProcessedData(arg0 context.Context, arg1 int) (res0 types.ESGRatingResult, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetProcessedData",
			"message", "GetProcessedData called",
			"request", logGetProcessedDataRequest{CompanyID: arg1},
			"response", logGetProcessedDataResponse{Result: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetProcessedData(arg0, arg1)
}

type (
	logGetProcessedDataRequest struct {
		CompanyID int
	}
	logGetProcessedDataResponse struct {
		Result types.ESGRatingResult
	}
)
