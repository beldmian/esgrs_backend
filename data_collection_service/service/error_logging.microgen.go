// Code generated by microgen 1.0.4. DO NOT EDIT.

package service

import (
	"context"
	service "esgrs/data_collection_service"
	types "esgrs/pkg/types"
	log "github.com/go-kit/kit/log"
)

// ErrorLoggingMiddleware writes to logger any error, if it is not nil.
func ErrorLoggingMiddleware(logger log.Logger) Middleware {
	return func(next service.DataCollectionService) service.DataCollectionService {
		return &errorLoggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type errorLoggingMiddleware struct {
	logger log.Logger
	next   service.DataCollectionService
}

func (M errorLoggingMiddleware) GetCompanyByID(ctx context.Context, id int) (company types.Company, err error) {
	defer func() {
		if err != nil {
			M.logger.Log("method", "GetCompanyByID", "message", err)
		}
	}()
	return M.next.GetCompanyByID(ctx, id)
}

func (M errorLoggingMiddleware) GetRawData(ctx context.Context, companyID int) (data []types.CriteriaRawData, err error) {
	defer func() {
		if err != nil {
			M.logger.Log("method", "GetRawData", "message", err)
		}
	}()
	return M.next.GetRawData(ctx, companyID)
}

func (M errorLoggingMiddleware) GetCompanyList(ctx context.Context) (companies []types.Company, err error) {
	defer func() {
		if err != nil {
			M.logger.Log("method", "GetCompanyList", "message", err)
		}
	}()
	return M.next.GetCompanyList(ctx)
}
