// Code generated by microgen 1.0.4. DO NOT EDIT.

package service

import (
	"context"
	service "esgrs/data_collection_service"
	types "esgrs/pkg/types"
	log "github.com/go-kit/kit/log"
	"time"
)

// LoggingMiddleware writes params, results and working time of method call to provided logger after its execution.
func LoggingMiddleware(logger log.Logger) Middleware {
	return func(next service.DataCollectionService) service.DataCollectionService {
		return &loggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMiddleware struct {
	logger log.Logger
	next   service.DataCollectionService
}

func (M loggingMiddleware) GetCompanyByID(arg0 context.Context, arg1 int) (res0 types.Company, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetCompanyByID",
			"message", "GetCompanyByID called",
			"request", logGetCompanyByIDRequest{Id: arg1},
			"response", logGetCompanyByIDResponse{Company: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetCompanyByID(arg0, arg1)
}

func (M loggingMiddleware) GetRawData(arg0 context.Context, arg1 int) (res0 []types.CriteriaRawData, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetRawData",
			"message", "GetRawData called",
			"request", logGetRawDataRequest{CompanyID: arg1},
			"response", logGetRawDataResponse{Data: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetRawData(arg0, arg1)
}

func (M loggingMiddleware) GetCompanyList(arg0 context.Context) (res0 []types.Company, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetCompanyList",
			"message", "GetCompanyList called",
			"response", logGetCompanyListResponse{Companies: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetCompanyList(arg0)
}

func (M loggingMiddleware) GetCategories(arg0 context.Context) (res0 []types.Category, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetCategories",
			"message", "GetCategories called",
			"response", logGetCategoriesResponse{Categories: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetCategories(arg0)
}

func (M loggingMiddleware) GetCategoryData(arg0 context.Context, arg1 int) (res0 types.Category, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "GetCategoryData",
			"message", "GetCategoryData called",
			"request", logGetCategoryDataRequest{CategoryID: arg1},
			"response", logGetCategoryDataResponse{Category: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.GetCategoryData(arg0, arg1)
}

func (M loggingMiddleware) CreateCategory(arg0 context.Context, arg1 types.Category) (res0 int, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "CreateCategory",
			"message", "CreateCategory called",
			"request", logCreateCategoryRequest{Category: arg1},
			"response", logCreateCategoryResponse{Id: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.CreateCategory(arg0, arg1)
}

func (M loggingMiddleware) CreateCompany(arg0 context.Context, arg1 types.Company) (res0 int, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "CreateCompany",
			"message", "CreateCompany called",
			"request", logCreateCompanyRequest{Company: arg1},
			"response", logCreateCompanyResponse{Id: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.CreateCompany(arg0, arg1)
}

type (
	logGetCompanyByIDRequest struct {
		Id int
	}
	logGetCompanyByIDResponse struct {
		Company types.Company
	}
	logGetRawDataRequest struct {
		CompanyID int
	}
	logGetRawDataResponse struct {
		Data []types.CriteriaRawData
	}
	logGetCompanyListResponse struct {
		Companies []types.Company
	}
	logGetCategoriesResponse struct {
		Categories []types.Category
	}
	logGetCategoryDataRequest struct {
		CategoryID int
	}
	logGetCategoryDataResponse struct {
		Category types.Category
	}
	logCreateCategoryRequest struct {
		Category types.Category
	}
	logCreateCategoryResponse struct {
		Id int
	}
	logCreateCompanyRequest struct {
		Company types.Company
	}
	logCreateCompanyResponse struct {
		Id int
	}
)
